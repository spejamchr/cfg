extends typescript
priority 1

global !p
def argsFromProps(propString):
  props= [prop.split('?')[0].split(':')[0].split(' ')[-1]
  for line in propString.splitlines()
  for prop in line.split(';') if prop]

  if props:
    return '{ ' + ', '.join(props) + ' }'
  else:
    return '';
endglobal

snippet fc "react functional component" b
import { observer } from 'mobx-react';
import * as React from "react"

interface Props {${2}}

const ${1:Component}: React.FC<Props> = (`!p snip.rv = argsFromProps(t[2])`) => (
  ${3:<p>Body</p>}
)

export default observer(`!p snip.rv = t[1]`)
endsnippet

snippet rc "react class component" b
import { observer } from 'mobx-react';
import * as React from 'react';

interface Props {
  ${2}
}

interface State {
  ${3}
}

@observer
class ${1:Component} extends React.Component<Props, State> {
  constructor(props: Props) {
    super(props);
  }

  render() {
    return ${4:<p>Body</p>};
  }
}

export default `!p snip.rv = t[1]`;
endsnippet
