snippet decoder "JSON Decoder"
export const ${1:some}Decoder: Decoder<`!p snip.rv = t[1][0].capitalize() + t[1][1:]`> = succeed({})
$0
endsnippet

snippet .assign "Assign to a JSON Decoder"
.assign('${1:prop}', field('`!p snip.rv = re.sub(r'(?<!^)(?=[A-Z])', '_', t[1]).lower()`', ${2:string}))$0
endsnippet

snippet storeTypes "Types for a basic store"
export interface Waiting {
  kind: 'waiting';
}

export interface Loading {
  kind: 'loading';
  link: Link;
}

export type LoadError = AppyError;

export interface LoadingError {
  kind: 'loading-error';
  error: LoadError;
}

export interface Ready {
  kind: 'ready';
  resource: $1,
}

export const waiting = (): Waiting => ({
  kind: 'waiting',
});

export const loading = (link: Link): Loading => ({
  kind: 'loading',
  link,
});

export const loadingError = (error: LoadError): LoadingError => ({
  kind: 'loading-error',
  error,
})

export const ready = (resource: `!p snip.rv = t[1]`): Ready => ({
  kind: 'ready',
  resource,
});

export type State = Waiting | Loading | LoadingError | Ready;
endsnippet

snippet sjc "Debugging logger"
console.log(\`[SJC] ${1:message}\`)
endsnippet

snippet store "Basic store"
import { action, makeObservable, observable } from 'mobx';
import { State, waiting } from './Types';

class Store {
  @observable
  state: State = waiting();

  constructor() {
    makeObservable(this);
  }

  @action
  ready = (): void => {
    switch (this.state.kind) {
      default:
        assertNever(this.state);
    }
  };
}

export default Store;
endsnippet

snippet reactions "Basic Reactions component"
import { warn } from '@execonline-inc/logging';
import Store from './Store';
import { State } from './Types';

class Reactions extends ReactionComponent<Store, State, RCProps<Store>> {
  tester = () => this.props.store.state;
  effect = (state: State) => {
    switch (state.kind) {
      case 'waiting':
        break;
      case 'loading':
        break;
      case 'ready':
        break;
      case 'loading-error':
        warn("Could not load $1", JSON.stringify(state.error));
        break;
      default:
        assertNever(state);
    }
  };
}

export default Reactions;
endsnippet
