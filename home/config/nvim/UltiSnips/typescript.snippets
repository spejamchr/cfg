snippet decoder "JSON Decoder"
export const ${1:some}Decoder: Decoder<`!p snip.rv = t[1][0].capitalize() + t[1][1:]`> = succeed({})
$0
endsnippet

snippet .assign "Assign to a JSON Decoder"
.assign('${1:prop}', field('`!p snip.rv = re.sub(r'(?<!^)(?=[A-Z])', '_', t[1]).lower()`', ${2:string}))
$0
endsnippet

snippet storeTypes "Types for a basic store"
interface Waiting {
  kind: 'waiting';
}

export interface Loading {
  kind: 'loading';
}

interface Ready {
  kind: 'ready';
}

interface Error {
  kind: 'error';
}

export const waiting = (): Waiting => ({
  kind: 'waiting',
});

export const loading = (): Loading => ({
  kind: 'loading',
});

export const ready = (): Ready => ({
  kind: 'ready',
});

export const error = (): Error => ({
  kind: 'error',
})

export type $1State = Waiting | Loading | Ready | Error;
endsnippet

snippet sjc "Debugging logger"
console.log(\`[SJC] ${1:message}\`)
endsnippet

snippet store "Basic store"
import assertNever from 'exo_modules/AssertNever';
import { action, observable } from 'mobx';
import { State, waiting } from './Types';

class Store {
  @observable
  state: State = waiting();

  @action
  ready = (): void => {
    switch (this.state.kind) {
      default:
        assertNever(this.state);
    }
  };
}

export default Store;
endsnippet

snippet reactions "Basic Reactions component"
import { warn } from '@execonline-inc/logging';
import assertNever from 'exo_modules/AssertNever';
import ReactionComponent, { RCProps } from 'javascripts/ReactionComponent';
import Store from './Store';
import { State } from './Types';

class Reactions extends ReactionComponent<Store, State, RCProps<Store>> {
  tester = () => this.props.store.state;
  effect = (state: State) => {
    switch (state.kind) {
      case 'waiting':
        break;
      case 'loading':
        break;
      case 'ready':
        break;
      case 'error':
        warn(state.message);
        break;
      default:
        assertNever(state);
    }
  };
}

export default Reactions;
endsnippet
