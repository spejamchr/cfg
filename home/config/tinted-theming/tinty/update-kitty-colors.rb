#!/usr/bin/env ruby
# frozen_string_literal: true

KITTY_DIR = File.join(ENV.fetch('XDG_CONFIG_HOME'), 'kitty').freeze

KITTY_COLORS_PATH = File.join(KITTY_DIR, 'colors.conf').freeze

DIFF_COLORS_PATH = File.join(KITTY_DIR, 'diff_colors.conf').freeze

def hex_rgb(color, rgb)
  ENV.fetch("TINTY_SCHEME_PALETTE_BASE#{color}_HEX_#{rgb}")
end

# @param color [String] A two-digit string identifying a BASEXX color
# @return [String] Hex string of a color
def get_color(color)
  hex = ["R", "G", "B"].map { |rgb| hex_rgb(color, rgb) }.join
  "##{hex}"
end

# Get array of integers (0-255) from hex string (#RRGGBB)
def rgb_integers(rgb_str)
  hex_pair = /[\da-f]{2}/i

  rgb_str.scan(hex_pair).map { |n| n.to_i(16) }
end

# Get hex string (#RRGGBB) from array of integers (0-255)
def rgb_string(rgb_ints)
  rgb_ints
    .map { |n| n.to_i.to_s(16) }
    .map { |c| c.length == 1 ? "0#{c}" : c }
    .unshift('#')
    .join
end

# Combine two colors with an alpha
def with_alpha(alpha, color, background)
  rgb_string(
    rgb_integers(color).zip(rgb_integers(background))
    .map { |c, b| (alpha * c) + ((1 - alpha) * b) }
    .map(&:round),
  )
end

palette = {
  base00: get_color("00"), # black
  base01: get_color("01"),
  base02: get_color("02"),
  base03: get_color("03"), # bright black
  base04: get_color("04"),
  base05: get_color("05"), # white
  base06: get_color("06"),
  base07: get_color("07"), # bright white
  base08: get_color("08"), # red
  base09: get_color("09"), # orange?
  base0A: get_color("0A"), # yellow
  base0B: get_color("0B"), # green
  base0C: get_color("0C"), # cyan
  base0D: get_color("0D"), # blue
  base0E: get_color("0E"), # magenta
  base0F: get_color("0F"), # brown?
}

kitty_colors = {
  foreground: palette[:base05],
  background: palette[:base00],

  selection_foreground: palette[:base05],
  selection_background: palette[:base02],

  color0: palette[:base00], # black
  color8: palette[:base03], # bright black

  color1: palette[:base08], # red
  color9: palette[:base08],

  color2: palette[:base0B], # green
  color10: palette[:base0B],

  color3: palette[:base0A], # yellow
  color11: palette[:base0A],

  color4: palette[:base0D], # blue
  color12: palette[:base0D],

  color5: palette[:base0E], # magenta
  color13: palette[:base0E],

  color6: palette[:base0C], # cyan
  color14: palette[:base0C],

  color7: palette[:base05], # white
  color15: palette[:base07], # bright white

  active_tab_foreground: palette[:base0E],
  active_tab_background: palette[:base01],
  inactive_tab_foreground: palette[:base05],
  inactive_tab_background: palette[:base01],

  cursor: palette[:base07],
  cursor_text_color: palette[:base00],

  url_color: palette[:base0C],

  active_border_color: palette[:base0B],
  inactive_border_color: palette[:base03],
  bell_border_color: palette[:base08],

  # transparent_background_colors: palette.values_at(:base01, :base02, :base07, :base0A).join(" "),
}

kitty_diff_colors = {
  foreground: palette[:base05],
  background: palette[:base00],

  title_fg: palette[:base04],
  title_bg: palette[:base01],

  margin_fg: palette[:base04],
  margin_bg: palette[:base02],

  removed_bg: with_alpha(0.1, palette[:base08], palette[:base00]),
  highlight_removed_bg: with_alpha(0.2, palette[:base08], palette[:base00]),
  removed_margin_bg: with_alpha(0.1, palette[:base08], palette[:base01]),

  added_bg: with_alpha(0.1, palette[:base0B], palette[:base00]),
  highlight_added_bg: with_alpha(0.2, palette[:base0B], palette[:base00]),
  added_margin_bg: with_alpha(0.1, palette[:base0B], palette[:base01]),

  filler_bg: palette[:base01],

  hunk_margin_bg: with_alpha(0.2, palette[:base0D], palette[:base00]),
  hunk_bg: with_alpha(0.2, palette[:base0D], palette[:base01]),

  search_fg: palette[:base05],
  search_bg: palette[:base02],

  select_fg: palette[:base05],
  select_bg: palette[:base02],
}

File.open(KITTY_COLORS_PATH, 'w') do |f|
  f.puts '# Autogenerated by a tinted-theming hook in'
  f.puts "# #{__FILE__}"
  kitty_colors.each { |kv| f.puts kv.join(' ') }
end

File.open(DIFF_COLORS_PATH, 'w') do |f|
  f.puts '# Autogenerated by a tinted-theming hook in'
  f.puts "# #{__FILE__}"
  kitty_diff_colors.each { |kv| f.puts kv.join(' ') }
end

`kitty @ --to unix:/tmp/mykitty set-colors --all --configured "#{KITTY_COLORS_PATH}"`
`kitty @ --to unix:/tmp/mykitty load-config`
