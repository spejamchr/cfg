#!/usr/bin/env ruby

THEME = File.read(
  File.join(ENV['BASE16_SHELL'], 'scripts', "base16-#{ENV['BASE16_THEME']}.sh")
).freeze

DIFF_COLORS_PATH = File.join(
  ENV['XDG_CONFIG_HOME'], 'kitty', 'diff_colors.conf'
).freeze

class Maybe
  def self.nothing;   self.new(nil); end
  def self.just(val); self.new(val); end

  def initialize(val)
    @val = val.nil? ? { kind: :nothing } : { kind: :just, val: val }
  end

  def map
    thing = just? ? yield(val[:val]) : self
    thing.is_a?(Maybe) ? thing : Maybe.new(thing)
  end

  def do
    just? && yield(val[:val])
    self
  end

  def assign(name)
    return self unless just?
    return self.class.nothing unless val[:val].is_a?(Hash)

    other = yield(val[:val])
    other = other.is_a?(Maybe) ? other : Maybe.new(other)
    other.map { |ov| val[:val].merge({ name => ov }) }
  end

  private

  attr_reader :val

  def just?; val[:kind] == :just; end
end

def get_color(color)
  rgb_matches = THEME.scan(/#{color}="(.*)"/)
  if rgb_matches.empty?
    puts "Can't find color '#{color}'"
    Maybe.nothing
  else
    Maybe.just('#' + rgb_matches.first.first.split('/').join)
  end
end

# Take an rgb hex string "#RRGGBB" and convert to hsl array [h, s, l]
def rgb_to_hsl(rgb)
  hex_pair = /[\da-f]{2}/i

  r, g, b = rgb.scan(hex_pair).map { |n| n.to_i(16) / 255.0 }
  big_m = [r, g, b].max
  small_m = [r, g, b].min
  c = big_m - small_m

  h_prime =
    if c == 0
      0.0
    elsif big_m == r
      ((g - b) / c) % 6
    elsif big_m == g
      (b - r) / c + 2
    elsif big_m == b
      (r - g) / c + 4
    end

  h = (60 * h_prime)
  l = ((big_m + small_m) / 2)
  s =
    if l == 0 || l == 1
      0.0
    else
      c / (1 - (2*l - 1).abs)
    end

  [h, s, l]
end

# Convert an hsl array [h, s, l] to rgb hex string "#RRGGBB"
def hsl_to_rgb(hsl)
  h, s, l = hsl
  a = s * [l, 1-l].min
  f = ->(n) {
    k = (n + h / 30.0) % 12
    l - a * [[k - 3, 9 - k, 1].min, -1].max
  }
  '#' + [f.(0), f.(8), f.(4)]
    .map { |n| (n * 255).round.to_s(16) }
    .map { |s| s.length == 1 ? "0#{s}" : s }
    .join
end

def adjust_hsl(color, diffs)
  h, s, l = rgb_to_hsl(color)

  h = (h + diffs[0]) % 360
  s = (s * diffs[1]).clamp(0, 1)
  l = (l * diffs[2]).clamp(0, 1)

  hsl_to_rgb([h, s, l])
end

palette = Maybe.just({})
  .assign(:black)        { get_color('color00') }
  .assign(:red)          { get_color('color01') }
  .assign(:green)        { get_color('color02') }
  .assign(:yellow)       { get_color('color03') }
  .assign(:blue)         { get_color('color04') }
  .assign(:magenta)      { get_color('color05') }
  .assign(:cyan)         { get_color('color06') }
  .assign(:white)        { get_color('color07') }
  .assign(:bright_black) { get_color('color08') }
  .assign(:bright_white) { get_color('color15') }
  .assign(:foreground)   { get_color('color_foreground') }
  .assign(:background)   { get_color('color_background') }
  .assign(:filler_bg)    { get_color('color19') }

colors = palette.map { |p| {
  foreground:           p[:foreground],
  background:           p[:background],

  title_fg:             p[:bright_white],
  title_bg:             p[:background],

  margin_bg:            p[:bright_black],
  margin_fg:            p[:white],

  removed_bg:           adjust_hsl(p[:red], [0, 0.5, 0.5]),
  highlight_removed_bg: adjust_hsl(p[:red], [0, 0.8, 0.6]),
  removed_margin_bg:    adjust_hsl(p[:red], [0, 0.5, 0.5]),

  added_bg:             adjust_hsl(p[:green], [0, 0.5, 0.5]),
  highlight_added_bg:   adjust_hsl(p[:green], [0, 0.8, 0.6]),
  added_margin_bg:      adjust_hsl(p[:green], [0, 0.5, 0.5]),

  filler_bg:            p[:bright_black],

  hunk_margin_bg:       adjust_hsl(p[:blue], [0, 0.5, 0.5]),
  hunk_bg:              adjust_hsl(p[:blue], [0, 0.5, 0.5]),

  search_bg:            p[:bright_white],
  search_fg:            p[:black],

  select_bg:            p[:cyan],
  select_fg:            p[:black],
} }

colors.do { |c|
  File.open(DIFF_COLORS_PATH, 'w') do |f|
    f.puts "# Autogenerated by a base16-shell hook in "
    f.puts "# #{__FILE__}"
    f.puts c.map { |kv| kv.join(' ') }.join("\n")
  end
}
