export XDG_CONFIG_HOME="$HOME/.config"

export MANPATH="/usr/local/man:$MANPATH"

# Set the locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export PATH="$PATH:`yarn global bin`" # Yarn setup (https://yarnpkg.com/en/docs/install#mac-tab)
export PATH="$HOME/.cargo/bin:$PATH" # Rust stuff
export PATH="/usr/local/opt/mysql@5.7/bin:$PATH" # Use the old mysql version
export PATH="$HOME/.local/bin:$PATH" # Haskell Stuff
export PATH="$PATH:$HOME/code/scripts" # My own scripts (managed manually)
export PATH="$PATH:$HOME/.bin" # My own scripts (managed by ~/.dotfiles/install.sh)

export CLICOLOR=1

# Use LunarVim
export VISUAL=lvim
export EDITOR="$VISUAL"

# More History
export HISTSIZE=5000

export GPG_TTY=$(tty)

# Set bat to use the base16 theme so it always matches the terminal
export BAT_THEME="base16"

source /usr/local/opt/chruby/share/chruby/chruby.sh
source /usr/local/opt/chruby/share/chruby/auto.sh
# chruby 2.6.7

# Edit this file more easily
alias ep="$EDITOR ~/.profile; source ~/.profile; echo \".profile edited and sourced\""

alias slack="open /Applications/Slack.app/"

function gitpushnew {
  BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
  if [[ "$BRANCH" == "master" ]]; then
    echo "You're on master!"
    return 1
  elif [[ $(git config --get branch.$BRANCH.merge) ]]; then
    echo "This branch already exists upstream"
    return 1
  else
    git push --set-upstream origin $BRANCH
  fi
}

# It's nicer to open a dir for editing when it's also the cwd
function edit() {
  if [[ $# = 0 ]]; then
    $EDITOR .
  elif [[ -f $1 ]]; then
    $EDITOR $1
  elif [[ -d $1 ]]; then
    (
      cd $1
      [[ -f .ruby-version ]] && chruby `cat .ruby-version`
      $EDITOR .
    )
  else
    echo "$1 not found"
    return 1
  fi
}
alias e="edit"

# This just simplifies things below
function rails_command() {
  (
    cd $1
    shift
    [[ -f .ruby-version ]] && chruby `cat .ruby-version`
    eval $@
  )
}

function rails_log() { rails_command $1 tail -f log/development.log; }
function rails_console() { rails_command $1 rails console; }
function rails_resque() { rails_command $1 start_resque; }

function in_new_kitty_window() {
  if [[ "$TERM" != "xterm-kitty" ]]; then
    echo "Only available in Kitty"
    return 1
  fi

  title="$1"
  shift

  kitty @ new-window --new-tab --tab-title "$title" --title "$title" --keep-focus

  [[ "$@" ]] && kitty @ send-text --match title:"^$title$" "$@"
}

################################################################################
export EO="$HOME/git/work/exec_online"
export P3="$EO/platform3"

# Run Rubocop against locally modified files
alias rubodiff='bundle exec pronto run --commit=$(git rev-parse origin/master) --runner rubocop'

function eo_terminal {
  cd $EO
  in_new_kitty_window "source" "edit $EO \n" && \
    in_new_kitty_window "console" "be rails console \n" && \
    in_new_kitty_window "木" "de tail -f log/development.log \n" && \
    in_new_kitty_window "EP木" "docker logs -f exec_online_ep_client_1 \n" && \
    in_new_kitty_window "P3木" "docker logs -f exec_online_p3_1 \n" && \
    in_new_kitty_window "puma木" "docker logs -f exec_online_exo_app_1 \n" && \
    in_new_kitty_window "pianoctl" "pianoctl \n" && \
    in_new_kitty_window "saml" "cd ~/work/saml && saml-idp --acsUrl 'https://dev-973490.okta.com/sso/saml2/0oapck7q3mWB0dStg356' --audience 'https://www.okta.com/saml2/service-provider/spsxqsdhiidkjmaqpwcv' \n"
}

alias eo="eo_terminal; slack"

# For working with Docker

# alias ds='docker-sync-stack start'
# alias dps='docker ps'

# de for 'docker exec' when you want to run a shell command in a container
alias de='docker exec -it exec_online_exo_app_1'

# dbash for when you want to open a shell in a container
# alias dbash='de bash'

# Tail the Puma logs for easy access to puts output
# alias pumalogs='docker logs -f exec_online_exo_app_1'

# be for 'bundle exec' which chains on top of 'de' to get you running in the container
alias be='de bundle exec'

# Chains on de + be to get you straight into a Rails console inside the container
# alias rc='be rails console'
# alias rdb='be rails dbconsole'

# Also, a script runner
# alias rscript='be rails runner'

# Chains on de and be to easily tail the Rails logs
# alias rlog='de tail -f log/development.log'

# alias dbmigrate='be rake db:migrate'
. "$HOME/.cargo/env"
